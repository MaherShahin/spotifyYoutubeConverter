package com.example.spotifyYoutubeConverter.Service.YoutubeSpotifyConverter;

import com.example.spotifyYoutubeConverter.Model.MyTrack;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifyCreatePlaylistService;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifyInsertTracksPlaylistService;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifySearchTrackService;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifyUrlService;
import com.example.spotifyYoutubeConverter.Service.YoutubeService.YoutubeUserPlaylistService;
import com.google.api.services.youtube.model.Playlist;
import com.google.api.services.youtube.model.PlaylistItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import se.michaelthelin.spotify.model_objects.specification.Track;

import java.io.IOException;
import java.util.ArrayList;

@Service
public class YoutubeSpotifyConverterService {

    @Autowired
    SpotifyUrlService spotifyUrlService;
    @Autowired
    SpotifyCreatePlaylistService spotifyCreatePlaylistService;
    @Autowired
    SpotifySearchTrackService spotifySearchTrackService;
    @Autowired
    SpotifyInsertTracksPlaylistService spotifyInsertTracksPlaylistService;
    @Autowired
    YoutubeUserPlaylistService youtubeUserPlaylistService;

    public ArrayList<Object> convertYoutubePlaylistToYoutube(String playlistId) throws IOException {
        se.michaelthelin.spotify.model_objects.specification.Playlist spotifyPlaylist = null;

        for (Playlist p: youtubeUserPlaylistService.getPlaylists()) {
            if (playlistId.equals(p.getId())){
                spotifyPlaylist = spotifyCreatePlaylistService.createPlaylistService(p.getSnippet().getTitle()
                        ,"Generated by my App");
                System.out.println("Generated a playlist Successfully: " + spotifyPlaylist.getName());
            }
        }

        ArrayList<Object> youtubeSpotifyComparison = new ArrayList<>();
        for (PlaylistItem playlistItem: youtubeUserPlaylistService.getItemsInPlaylist(playlistId)) {
            Track[] track = spotifySearchTrackService
                    .searchForTrack(
                            youtubeUserPlaylistService.getYoutubeTrackName(playlistItem));

            if (track.length>0 && spotifyPlaylist!=null){
                MyTrack newTrack = new MyTrack(youtubeUserPlaylistService.getYoutubeTrackName(playlistItem),
                        track[0].getName());
                youtubeSpotifyComparison.add(newTrack);
                spotifyInsertTracksPlaylistService.insertItemsInPlaylist(spotifyPlaylist.getId(),track[0].getUri());

            } else {
                MyTrack newTrack = new MyTrack(youtubeUserPlaylistService.getYoutubeTrackName(playlistItem),
                        "No item found :(");
            }
        }
        return youtubeSpotifyComparison;
    }

}
