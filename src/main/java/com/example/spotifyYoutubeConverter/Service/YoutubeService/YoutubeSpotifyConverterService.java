package com.example.spotifyYoutubeConverter.Service.YoutubeService;

import com.example.spotifyYoutubeConverter.Model.MyTrack;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifyCreatePlaylistService;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifyInsertTracksPlaylistService;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifySearchTrackService;
import com.example.spotifyYoutubeConverter.Service.SpotifyService.SpotifyUrlService;
import com.google.api.services.youtube.model.Playlist;
import com.google.api.services.youtube.model.PlaylistItem;
import com.google.api.services.youtube.model.PlaylistItemListResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import se.michaelthelin.spotify.model_objects.specification.Track;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@Service
public class YoutubeSpotifyConverterService {

    @Autowired
    SpotifyUrlService spotifyUrlService;
    @Autowired
    SpotifyCreatePlaylistService spotifyCreatePlaylistService;
    @Autowired
    SpotifySearchTrackService spotifySearchTrackService;
    @Autowired
    SpotifyInsertTracksPlaylistService spotifyInsertTracksPlaylistService;
    @Autowired
    YoutubeUserPlaylistService youtubeUserPlaylistService;

    public ArrayList<Object> convertYoutubePlaylistToSpotify(String playlistId) throws IOException {

        se.michaelthelin.spotify.model_objects.specification.Playlist spotifyPlaylist = null;
        Playlist youtubePlaylist = null;

        for (Playlist p: youtubeUserPlaylistService.getPlaylists()) {
            if (playlistId.equals(p.getId())){
                youtubePlaylist = p;
                spotifyPlaylist = spotifyCreatePlaylistService.createPlaylistService(p.getSnippet().getTitle()
                        ,"Generated by my App");
                System.out.println("Generated a playlist Successfully: " + spotifyPlaylist.getName());
            }
        }

        ArrayList<Object> youtubeSpotifyComparison = new ArrayList<>();
        ArrayList<String> SpotifyUrisToBeAdded = new ArrayList<String>();

        PlaylistItemListResponse playlistItemsListResponse = youtubeUserPlaylistService.getItemsInPlaylist(playlistId);

        if (playlistItemsListResponse.containsKey("nextPageToken")){
            System.out.println("YES!");
        }

        boolean lastPage = false;

        do {
           if (!playlistItemsListResponse.containsKey("nextPageToken")){
               lastPage = true;
           }
            String nextPageToken = playlistItemsListResponse.getNextPageToken();
            List<PlaylistItem> playlistItems = playlistItemsListResponse.getItems();
            for (String s : convertSpotifyTrack(playlistItems)) {
                SpotifyUrisToBeAdded.add(s);
            }
            playlistItemsListResponse = youtubeUserPlaylistService.getItemsInPlaylistOffset(playlistId,nextPageToken);
        } while (!lastPage);

        System.out.println("UrisList Size: " + SpotifyUrisToBeAdded.size());
        String[] UrisToBeAdded =  SpotifyUrisToBeAdded.toArray(new String[SpotifyUrisToBeAdded.size()]);
        spotifyInsertTracksPlaylistService.insertItemsInPlaylist(spotifyPlaylist.getId(),UrisToBeAdded);

        return youtubeSpotifyComparison;
    }

    public ArrayList<String> convertSpotifyTrack(List<PlaylistItem> playlistItemList){
        ArrayList<Object> youtubeSpotifyComparison = new ArrayList<>();
        ArrayList<String> SpotifyUrisToBeAdded = new ArrayList<String>();

        for (PlaylistItem playlistItem : playlistItemList) {
            Track[] track = spotifySearchTrackService
                    .searchForTrack(
                            youtubeUserPlaylistService.getYoutubeTrackName(playlistItem));

            if (track.length>0){
                MyTrack newTrack = new MyTrack(youtubeUserPlaylistService.getYoutubeTrackName(playlistItem),
                        track[0].getName());
                youtubeSpotifyComparison.add(newTrack);
                SpotifyUrisToBeAdded.add(track[0].getUri());
            } else {
                MyTrack newTrack = new MyTrack(youtubeUserPlaylistService.getYoutubeTrackName(playlistItem),
                        "No item found :(");
            }
        }
        return SpotifyUrisToBeAdded;
    }

}
